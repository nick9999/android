package com.example.fetchdata;

import java.io.IOException;

import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONObject;

import android.app.Activity;
import android.app.ProgressDialog;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;

public class MainActivity extends Activity {

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		final Button GetServerData=(Button) findViewById(R.id.GetServerData);
		 GetServerData.setOnClickListener(new OnClickListener()
		 {   public void onClick(View v){
			 String serverUrl="http://10.1.9.14:8000/api?polygon_id=1381881";
			 new LongOperation().execute(serverUrl);
		 }
	});
	}
	
	private class LongOperation extends AsyncTask<String,Void,Void>{
		 private final HttpClient Client = new DefaultHttpClient();
		 private String Content;
		 private String Error=null;
		 private ProgressDialog Dialog=new ProgressDialog(MainActivity.this);
		 TextView uiUpdate = (TextView) findViewById(R.id.output);
		 protected void onPreExecute()
		 {
			 uiUpdate.setText("Output : ");
	         Dialog.setMessage("Wait.....");
	         Dialog.show();
		 }
		 protected Void doInBackground(String... urls) 
		 {
			 try
			 {
				 HttpGet httpget = new HttpGet(urls[0]);
	             ResponseHandler<String> responseHandler = new BasicResponseHandler();
	             Content = Client.execute(httpget, responseHandler);
			 } 	 
			 catch (ClientProtocolException e)
				 {
		                Error = e.getMessage();
		                cancel(true);
		          } 
			 catch (IOException e)
			 {
	                Error = e.getMessage();
	                cancel(true);
	          }
	             
	            return null;
	        }
		 protected void onPostExecute(Void unused)
		 {
	            
	            Dialog.dismiss();
	             
	            if (Error != null) {
	                 
	                uiUpdate.setText("Output : "+Error);
	                 
	            } else {
	                 
	                //uiUpdate.setText("Output : "+Content);
	            	String OutputData="";
	            	JSONObject jsonResponse;
	            	try
	            	{
	            		jsonResponse =new JSONObject(Content);
	            		JSONArray jsonMainNode = jsonResponse.optJSONArray("price_trend");
	            		int lengthJsonArr=jsonMainNode.length();
	            		for(int i=0;i<lengthJsonArr;i++)
	            	}
	                 
	             }
	        }
	         
	    }
	
	
	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

}
