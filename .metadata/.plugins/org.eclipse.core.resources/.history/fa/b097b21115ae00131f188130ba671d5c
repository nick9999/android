import java.util.Arrays;


public class Monster{
	
	static char[][] battleField=new char[10][10];
	public static void buildBattleField()
	{
		for(char[] row:battleField)
		{
			Arrays.fill(row, '*');
		}
			
	}
	
	public static void redraw()
	{
		int k=0;
		while(k<30)
		{
			System.out.print('-');
			k++;
		}
		System.out.println();
		
		for(int i=0;i<battleField.length;i++)
		{
			for(int j=0;j<battleField[i].length;j++)
			{
				System.out.print("|"+battleField[i][j]+"|");
				
			}
			
			System.out.println();
		}
		k=0;
		while(k<30)
		{
			System.out.print('-');
			k++;
		}
		System.out.println();
	}
	
	public final String TOMBSTONE =" Here Lies a Dead Monster";
	private int health=100;
	private int attack=20;
	private int movement=2;
	public int xposition=0;
	public int yposition=0;
	private boolean alive=true;
	
	public String name="Big Monster";
	public char name1='B';
	public int numofmonster=0;
	public int getAttack()
	{
		return attack;
	}
	
	public int getMovement()
	{
		return movement;
	} 
	
	public int getHealth()
	{
		return health;
	}	
	
	public boolean getAlive()
	{
		return alive;
	}
	public void setHealth(int dec)
	{
		health=health-dec;
		if(health<0)
		{
			alive=false;
		}
	}
	public Monster (int newHealth, int newAttack, int newMovement,String name)
	{
		health=newHealth;
		attack=newAttack;
		movement=newMovement;
		this.name=name;
		int maxXboardspace=battleField.length-1;
		int maxYboardspace=battleField[0].length-1;
		int randx,randy;
		do
		{
			randx=(int) (Math.random()*11);
			randy=(int) (Math.random()*11);
		}
	}
	
	public Monster()
	{
		
	}
	
	
}
