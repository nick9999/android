package com.example.googlemaps;

import java.io.IOException;
import java.util.ArrayList;

import org.apache.http.client.ClientProtocolException;
import org.apache.http.client.HttpClient;
import org.apache.http.client.ResponseHandler;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.BasicResponseHandler;
import org.apache.http.impl.client.DefaultHttpClient;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import android.app.Activity;
import android.app.ProgressDialog;
import android.graphics.Color;
import android.os.AsyncTask;
import android.os.Bundle;
import android.view.Menu;
import android.widget.TextView;

import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.GoogleMapOptions;
import com.google.android.gms.maps.MapFragment;
import com.google.android.gms.maps.model.CircleOptions;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;

public class MainActivity extends Activity {
	// static final LatLng POWAI= new LatLng(19.1200, 72.9100);
	// static final LatLng KIEL= new LatLng(53.551, 9.993);
	TextView textView;
	private GoogleMap map;
	String OutputData = "";
	CircleOptions circleOptions;
	GoogleMapOptions options;
	ArrayList<Marker> markers= new ArrayList<Marker>();

	
	static int OFFSET = 268435456;
	static double RADIUS = 85445659.4471;
	static double pi = 3.1444;
	
	static int[] Id;
	 static double[] Latitude;
	static double[] Longitude;
	
	double sum_latitude = 0;
	double sum_longitude = 0;
	double centroid_latitude = 0;
	double centroid_longitude = 0;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		// textView=(TextView) findViewById(R.id.textView);
		String Serverurl = "http://housing.com/api/v1/rent/filter?details=true&key=MCwwDQYJKoZIhvcNAQEBBQADGwAwGAIRAKwdFM3qg%2BPOoE57z3YoAzcCAwEAAQ%3D%3D&city=mumbai&sort_by=distance&asc=true&lat_lng=19.106112%2C72.825145&radius=3000";
		new LongOperation().execute(Serverurl);

		/*
		 * map=((MapFragment)getFragmentManager().findFragmentById(R.id.map)).getMap
		 * (); LatLng mapCenter =new LatLng(19.1200, 72.9100); CircleOptions
		 * circleOptions =new CircleOptions(). center(mapCenter). radius(30000).
		 * fillColor(Color.TRANSPARENT). strokeColor(Color.BLUE).
		 * strokeWidth(2); map.addCircle(circleOptions); Marker
		 * powai=map.addMarker(new
		 * MarkerOptions().position(POWAI).title("POWAI")); //Map.addCircle(new
		 * CircleOptions
		 * ().center(mapCentre).radius(10).strokeColor(Color.RED).fillColor
		 * (Color.RED)); map.moveCamera(CameraUpdateFactory.newLatLngZoom(POWAI,
		 * 15)); map.animateCamera(CameraUpdateFactory.zoomTo(10), 2000, null);
		 */

	}

	private class LongOperation extends AsyncTask<String, Void, Void> {
		private final HttpClient Client = new DefaultHttpClient();
		private String Content;
		private String Error = null;
		private ProgressDialog Dialog = new ProgressDialog(MainActivity.this);

		protected void onPreExecute() {
			Dialog.setMessage("Wait.....");
			Dialog.show();
		}

		protected Void doInBackground(String... urls) {
			try {
				HttpGet httpget = new HttpGet(urls[0]);
				ResponseHandler<String> responseHandler = new BasicResponseHandler();
				Content = Client.execute(httpget, responseHandler);
			} catch (ClientProtocolException e) {
				Error = e.getMessage();
				cancel(true);
			} catch (IOException e) {
				Error = e.getMessage();
				cancel(true);
			}
			return null;
		}

		protected void onPostExecute(Void unused) {
			Dialog.dismiss();
			if (Error != null) {
				// do something to show the error
			}

			else {
				JSONObject jsonResponse1;
				JSONObject jsonResponse2;
				textView = (TextView)findViewById(R.id.textView);
				try {
					jsonResponse1 = new JSONObject(Content);
					jsonResponse2 = jsonResponse1.optJSONObject("result");
					JSONArray jsonMainNode = jsonResponse2.optJSONArray("listings");
					int lengthJsonArr = jsonMainNode.length();
					 Id = new int[lengthJsonArr];
					 Latitude = new double[lengthJsonArr];
					 Longitude = new double[lengthJsonArr];
					LatLng mapCenter = new LatLng(19.106112, 72.825145);

					map = ((MapFragment)getFragmentManager().findFragmentById(R.id.map)).getMap();

					circleOptions = new CircleOptions().center(mapCenter).radius(3000).fillColor(Color.TRANSPARENT).strokeColor(Color.BLUE).strokeWidth(2);
					map.addCircle(circleOptions);

					for (int i = 0; i < lengthJsonArr; i++) {
						JSONObject jsonChildNode = jsonMainNode.getJSONObject(i);
						int id = jsonChildNode.getInt("id");
						double latitude = jsonChildNode.getDouble("latitude");
						double longitude = jsonChildNode.getDouble("longitude");
						OutputData += id + "   " + latitude + "," + longitude + "\n";
						Id[i] = id;
						Latitude[i] = latitude;
						Longitude[i] = longitude;
						
						
						
						LatLng mapPoint = new LatLng(latitude, longitude);
						
						Marker marker=map.addMarker(new MarkerOptions().position(mapPoint).title(Integer.toString(id)));
						markers.add(marker);
					}
					
					
					
					
					centroid_latitude = sum_latitude / lengthJsonArr;
					centroid_longitude = sum_longitude / lengthJsonArr;
					// map.setClustering(new ClusteringSettings());

					// textView.setText(OutputData);
					map.animateCamera(CameraUpdateFactory.newLatLngZoom(mapCenter, 15), 2000, null);

				} catch (JSONException e) {
					e.printStackTrace();
				}
			}
		}

	}

	public static double lgnTox(double longitude)
	{
		return Math.round(OFFSET + RADIUS * longitude * pi / 180);
	}
	
	public static double latToy(double latitude)
	{
		return Math.round(OFFSET
				- RADIUS
				* Math.log((1 + Math.sin(latitude * pi / 180))
						/ (1 - Math.sin(latitude * pi / 180))) / 2);
	}
	
	public static int pixelDistance(double latitude1, double longitude1, double latitude2, double longitude2, int zoom)
	{
		double x1=lgnTox(longitude1);
		double y1=latToy(latitude1);
		double x2=lgnTox(longitude1);
		double y2=latToy(latitude2);
		
		return (int) (Math.sqrt(Math.pow((x1 - x2), 2) + Math.pow((y1 - y2), 2))) >> (21 - zoom);
	}
	
	public static ArrayList<Marker> cluster(ArrayList<Marker> markers, int zoom) {

		ArrayList<Marker> clusterList = new ArrayList<Marker>();

		ArrayList<Marker> originalListCopy = new ArrayList<Marker>();

		for (Marker marker : markers) {
			originalListCopy.add(marker);
		}

		/* Loop until all markers have been compared. */
		for (int i = 0; i < originalListCopy.size();) {

			/* Compare against all markers which are left. */

			ArrayList<Marker> markerList = new ArrayList<Marker>();
			for (int j = i + 1; j < markers.size();) {
				int pixelDistance = pixelDistance(Latitude[i],Longitude[i], Latitude[j], Longitude[j],zoom);

				if (pixelDistance < 40) {

					markerList.add(markers.get(j));

					markers.remove(j);

					originalListCopy.remove(j);
					j = i + 1;
				} else {
					j++;
				}

			}

			if (markerList.size() > 0) {
				markerList.add(markers.get(i));

				LatLng centroidPoint = calculateClusterCentroid(markerList);

				// Cluster cluster = new Cluster(clusterList.size(), markerList,
				// markerList.size() + 1, originalListCopy.get(i)
				// .getLatitude(), originalListCopy.get(i)
				// .getLongitude());

				Cluster cluster = new Cluster(clusterList.size(), markerList,
						markerList.size() + 1, centroidPoint.latitude,
						centroidPoint.longitude);
				clusterList.add(cluster);
				originalListCopy.remove(i);
				markers.remove(i);
				i = 0;

			} else {
				i++;
			}

			/* If a marker has been added to cluster, add also the one */
			/* we were comparing to and remove the original from array. */

		}
		return clusterList;
	}


	
	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

}
